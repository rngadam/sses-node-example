!!!
html
  head
    title SSEs, Node.js, and Redis
    link(rel='stylesheet', href='/stylesheets/style.css')
  body
    != body

    script(src='http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js')
    script(src='http://jquery-json.googlecode.com/files/jquery.json-2.2.min.js')
    script(type='text/javascript')
      String.prototype.startsWith = function(str) {return (this.match("^"+str)==str)}
      var source = new EventSource('/update-stream');
      var lastCounter = null;
      var lastTime = null;
      var start = null;
      var messageReceived = 0;
      var dropped = 0;
      source.addEventListener('message', function(e) {
        //console.log(e);
        event = JSON.parse(e.data);
        //if(!event.facility.startsWith('local'))
        //  return;
        if(event['syslogfacility-text'] != 'local3')
          return;

        if(start == null) {
          start = new Date().getTime();
        }
        messageReceived++;
        var current = new Date().getTime();
        var delta = (current - start);

        var messagePerSecond = messageReceived/Math.ceil(delta/1000);

        $('p').text(
          'messageReceived ' + messageReceived
          + ' messagePerSecond ' + messagePerSecond.toFixed(2)
          + ' dropped ' + dropped
          );
        $('div.messagePerSecond').text('' + messagePerSecond);

        //console.log('messagePerSecond:' + messagePerSecond);
        data = event.msg.split(',').map(function( num ) {
          return parseFloat( num, 10 ) });
        //$('ul').append('<li>' + e.data + ' (message id: ' + e.lastEventId + ')</li>');
        /*$('ul').append(
          '<li>'
          + event.message
          + ' counter '
          + data[0]
          + ' (message id: '
          + e.lastEventId
          + ')</li>');*/
        if(lastCounter>0) {
          if( (data[0] - lastCounter) == 1) {
            //console.log("sequential");
          } else {
            console.log("not sequential, expected " + (lastCounter + 1) + " got " + data[0]);
            dropped++;
          }
        }
        lastCounter = data[0];
        lastTime = data[1];
      }, false);
